// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  // NOTE: You probably want to change this to another database later on
  provider = "postgresql"

  // This value is read from the .env file.
  url = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
  services     Service[]
  role        Role   @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id            String   @id @default(cuid())
  name          String
  appUrl        String
  discussionUrl String
  description   String
  likes         Like[]
  status        Status @default(NEW)
  requestedBy   User?    @relation(fields: [requestedById], references: [id])
  requestedById String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Like {
  id         String   @id @default(cuid())
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String   
  score      Int      @default(0) // 1 or -1 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([serviceId, userId])
}

enum Status {
  NEW 
  INPROGRESS
  ADDED
  DECLINED
}

enum Role {
  ADMIN
  USER
}